# Example Environment Variables for HotSpot360 Solar Calculator Backend

# --- API URLs (Optional - Defaults are set in services if these are not provided) ---

# Overpass API endpoint for fetching map data (buildings, obstacles)
# Default: https://overpass-api.de/api/interpreter
OVERPASS_API_URL=https://overpass-api.de/api/interpreter

# PVGIS API endpoint for photovoltaic calculations (solar radiation, optimal angles)
# Default: https://re.jrc.ec.europa.eu/api/v5_2/PVcalc
PVGIS_API_URL_CALC=https://re.jrc.ec.europa.eu/api/v5_2/PVcalc

# PVGIS API endpoint for solar horizon calculations
# Default: https://re.jrc.ec.europa.eu/api/v5_2/SHcalc
PVGIS_API_URL_HORIZON=https://re.jrc.ec.europa.eu/api/v5_2/SHcalc


# --- Database Configuration (Currently uses a local SQLite file by default) ---
# If you switch to a different database system (e.g., PostgreSQL) in production,
# you might use a DATABASE_URL format like:
# DATABASE_URL=postgresql://user:password@host:port/database_name
# For the current SQLite setup in backend/data/subsidies.db, no specific env var is used by default,
# but you could adapt the db/database.py to use one if needed for flexibility.
# SQLITE_DATABASE_PATH=./data/subsidies.db # Example if you wanted to make it configurable


# --- Application Settings (Future possibilities) ---

# Secret key for JWT token generation if authentication is added
# Generate a strong random key, e.g., using: openssl rand -hex 32
# APP_SECRET_KEY=your_strong_random_secret_key_here

# Application environment (e.g., development, staging, production)
# APP_ENV=development

# CORS origins if you need to customize them beyond the defaults in main.py for production
# Example: ALLOWED_ORIGINS=https://app.hotspot360.com,https://another.domain.com
# (The application would need to be modified to parse this string)


# --- Other Service Keys (Future possibilities) ---

# API Key for a geocoding service, if used
# GEOCODING_API_KEY=your_geocoding_api_key

# API Key for a weather service, if used for more detailed local conditions
# WEATHER_API_KEY=your_weather_api_key


# To use these variables:
# 1. Rename this file to .env (or create a new .env file).
# 2. Fill in the actual values for your environment.
# 3. The application (specifically python-dotenv) will load these variables when it starts.
# Note: .env files should typically NOT be committed to version control if they contain secrets.
# Only .env.example should be committed.
