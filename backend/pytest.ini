[pytest]
# Especifica el directorio donde se buscarán los tests.
testpaths = tests

# Patrones para los nombres de archivo de test.
python_files = test_*.py *_test.py

# Patrones para los nombres de clases de test.
# Pytest también descubre clases que empiezan con Test*.
python_classes = Test*

# Patrones para los nombres de funciones de test.
python_functions = test_*

# Opciones para pytest-cov (cobertura de código)
# Estas también se pueden pasar por línea de comandos.
# addopts = --cov=app --cov-report=term-missing --cov-report=html

# Variables de entorno para los tests, si son necesarias.
# Por ejemplo, para usar una base de datos de test diferente.
# env =
#     APP_ENV=test
#     DATABASE_URL=sqlite:///./test.db

# Registrar markers personalizados si se usan.
# markers =
#     slow: marca tests como lentos de ejecutar
#     integration: marca tests de integración

# Opciones de logging para tests
log_cli = true
log_cli_level = INFO
log_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_date_format = %Y-%m-%d %H:%M:%S

# Añadir el directorio raíz de la app al pythonpath para que los imports funcionen
# Esto es útil si los tests están en un subdirectorio y necesitan importar desde 'app'
# como si estuvieran en el directorio 'backend'.
pythonpath = . app
# El punto (.) se refiere al directorio donde se encuentra pytest.ini (backend/)
# 'app' se refiere a backend/app/
# Esto ayuda a resolver imports como `from app.services import ...` en los tests.

# Filtrar warnings específicos si es necesario (ejemplo)
# filterwarnings =
#     ignore::DeprecationWarning
